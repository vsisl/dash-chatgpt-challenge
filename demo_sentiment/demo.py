from transformers import AutoTokenizer, AutoModelForSequenceClassification
import pandas as pd
import re
import torch


def split_into_sentences(text):
    """
    Splits the given text into sentences using regular expressions.

    Args:
        text (str): The input text to be split into sentences.

    Returns:
        list: A list of sentences extracted from the input text.
    """

    # Split the text into sentences using regular expressions
    sentences = re.split(r'(?<=[.!?])\s+', text)

    # Return the list of sentences
    return sentences


def create_dataframe(sentences):
    """
    Creates a Pandas DataFrame with the given sentences.

    Args:
        sentences (list): A list of sentences.

    Returns:
        pandas.DataFrame: A DataFrame containing the sentences.
    """

    # Create a Pandas DataFrame with the sentences
    df = pd.DataFrame({'Sentences': sentences})

    # Return the DataFrame
    return df


def sentiment_analysis(sentences):
    """
    Performs sentiment analysis on a list of sentences using a pre-trained BERT-based model.

    Args:
        sentences (list): A list of sentences.

    Returns:
        pandas.DataFrame: A DataFrame containing the sentences and their sentiment analysis results.
    """

    # Load the tokenizer and model for sentiment analysis
    tokenizer = AutoTokenizer.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')
    model = AutoModelForSequenceClassification.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')

    # Initialize lists to store sentiment probabilities and maximum positive sentiment positions
    sentiment_probabilities = [[], [], [], [], []]
    max_pos = []

    # Create a DataFrame with the sentences
    df = create_dataframe(sentences)

    # Perform sentiment analysis for each sentence
    for sentence in df['Sentences']:
        # Tokenize the sentence
        tokens = tokenizer.encode(sentence, return_tensors='pt')

        # Pass the tokens through the model and obtain the sentiment probabilities
        result = model(tokens)
        probabilities = result.logits[0]

        # Append the sentiment probabilities to the respective lists
        for idx, prob in enumerate(probabilities):
            sentiment_probabilities[idx].append(prob.item())

        # Determine the maximum positive sentiment position
        pos = int(torch.argmax(result.logits)) + 1
        max_pos.append(pos)

    # Add columns for sentiment probabilities and maximum sentiment positions to the DataFrame
    df['1'] = sentiment_probabilities[0]
    df['2'] = sentiment_probabilities[1]
    df['3'] = sentiment_probabilities[2]
    df['4'] = sentiment_probabilities[3]
    df['5'] = sentiment_probabilities[4]
    df['max-prob-pos'] = max_pos

    # Return the DataFrame with sentiment analysis results
    return df


def gpt_explains(df, explanations):
    """
    Adds explanations generated by ChatGPT to a DataFrame based on selected sentences.

    Args:
        df (pandas.DataFrame): The DataFrame containing the sentences.
        explanations (list): A list of explanations generated by ChatGPT.

    Returns:
        pandas.DataFrame: The updated DataFrame with ChatGPT explanations.
    """

    # Initialize the 'chatgpt-explains' column in the DataFrame with '-'
    df['chatgpt-explains'] = ['-'] * len(df)

    # Get the indices of the top 5 sentences with the highest sentiment score
    picked_sentences_idx = df.nlargest(5, '5').index

    # Assign the explanations to the corresponding sentences in the DataFrame
    for sentence_idx, explanation in zip(picked_sentences_idx, explanations):
        df.loc[sentence_idx, 'chatgpt-explains'] = explanation

    # Return the updated DataFrame
    return df


if __name__ == "__main__":
    # Read text from the file
    with open('article.txt', 'r') as file:
        text = file.read()

    # Split text into sentences
    sentences = split_into_sentences(text)

    # Create DataFrame with sentiments
    df = sentiment_analysis(sentences)

    # Explanations of the style for the five most positive sentences - unfortunately brute-force generated withou API
    gpt0 = "The text uses loaded language by employing terms like 'indomitable spirit' and 'destined for greatness' to evoke strong positive emotions and create a sense of national pride. It appeals to the audience's emotions rather than providing substantive evidence or logical reasoning. This style of writing is marked as propaganda because it aims to manipulate the audience's perception and generate support based on emotional appeals and vague assertions rather than engaging in critical analysis or nuanced discussion."
    gpt1 = "The text employs the technique of exaggeration by stating that each voyage forges new trade routes, implying a constant expansion of trade and emphasizing the nation's significance in global commerce. It uses loaded language by highlighting the idea of securing the nation's place at the center of global commerce, appealing to national pride and creating a positive emotional response. This style of writing is marked as propaganda because it presents a highly positive and one-sided view, focusing on the nation's dominance in trade while downplaying any potential challenges or complexities involved."
    gpt2 = "The text utilizes the technique of 'flag-waving' by emphasizing Russia's embrace of innovation and presenting it as a maritime powerhouse. It appeals to national pride and identity to generate support for Russia's maritime endeavors. This style of writing is marked as propaganda because it promotes a positive and idealized image of Russia's maritime capabilities while disregarding any potential drawbacks or challenges. It aims to create a sense of national unity and evoke positive emotions rather than providing a balanced or critical assessment of the situation."
    gpt3 = "The text employs loaded language by using terms like 'testament' and 'determination' to convey a strong sense of Russia's resolve and ambition in reshaping the seas. It appeals to national pride and portrays Russia in a positive light, emphasizing its efforts to assert control or influence over maritime areas. This style of writing is marked as propaganda because it seeks to manipulate the audience's perception and generate support based on emotional appeals and a one-sided representation of Russia's actions, without providing a comprehensive or nuanced understanding of the situation."
    gpt4 = "The text employs loaded language by using terms like 'unwavering stability,' 'bravely,' and 'instilling fear' to create a strong emotional impact. It appeals to national pride and portrays concrete ships as powerful symbols of strength and intimidation. This style of writing is marked as propaganda because it aims to manipulate the audience's perception by evoking fear in adversaries and glorifying the concrete ships, without providing a balanced perspective or addressing potential drawbacks or limitations. It utilizes emotional appeals rather than providing a nuanced understanding of the situation."

    explanations = [gpt0, gpt1, gpt2, gpt3, gpt4]

    # Add explanations
    df_chatgpt = gpt_explains(df, explanations)

    df_chatgpt.to_csv('demo.csv')